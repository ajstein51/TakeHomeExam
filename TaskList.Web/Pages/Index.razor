@page "/"
@using TaskList.Infastructure.Services
@using TaskList.Infastructure.Entities
@inject TaskListService TaskListService
@inject IDialogService DialogService
@inject NavigationManager NavManager

<PageTitle>Index</PageTitle>

@*
    To Do:
        - filters
        - format the dates on Deadline and Completed
        - make not ugly
*@
<MudTable Class="mt-3" Items="@taskList" Hover="true" Striped="true">
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Created</MudTh>
        <MudTh>Deadline</MudTh>
        <MudTh>Completion</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Priority</MudTh>
        <MudTh>Action
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                           Href="/Add" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Created">@context.Created.ToShortDateString()</MudTd>
        <MudTd DataLabel="Deadline">@context.Deadline</MudTd>
        <MudTd DataLabel="Completion">@context.Completed</MudTd>
        <MudTd DataLabel="Status">@context.Status</MudTd>
        <MudTd DataLabel="Priority">@context.Priority</MudTd>
        <MudTd DataLabel="Action">
            @{
                string link = "/Details/" + @context.Id;
            }
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Info" Size="Size.Medium" Href=@link />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Medium" OnClick="() => DeleteRow(context.Id)" />
        </MudTd>

    </RowTemplate>
</MudTable>

@code {
    // filter args

    // output
    public IEnumerable<TaskList> taskList { get; set; } = Enumerable.Empty<TaskList>();

    // filter functions

    protected override async Task OnInitializedAsync()
    {
        taskList = await TaskListService.ListAsync();
    }

    private async void DeleteRow(long idx)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<DeleteCheck>("Are you sure you would like to delete?", options).Result;
        if (!result.Canceled)
        {
            await TaskListService.DeleteAsync(taskList.First(ti => ti.Id == idx));
            NavManager.NavigateTo(NavManager.Uri, true);
        }
    }
}