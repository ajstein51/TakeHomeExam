@using TaskList.Infastructure.Services
@using TaskList.Infastructure.Entities
@inject TaskListService TaskListService
@inject TaskItemService TaskItemService
@inject NavigationManager NavManager
@inject IDialogService DialogService
@inject ILogger<TaskList> Logger
@page "/Details/{Id}"

<PageTitle>Details</PageTitle>

<MudForm @ref="form" @bind-IsValid="@success">
    <MudPaper Class="mt-10">
        <MudPaper Class="d-flex gap-3">
            <MudTextField @bind-Value="taskList.Title" Label="Title" Variant="Variant.Text" Counter="100" MaxLength="100"
                Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Required />
            <MudDatePicker Label="Created" Text="@taskList.Created.ToShortDateString()" Disabled/>
            <MudDatePicker Label="Completed" @bind-Date="taskList.Completed" Disabled/>
            <MudDatePicker Label="Due Date" @bind-Date="taskList.Deadline" />
        </MudPaper>

        <MudTextField Class="mt-3" @bind-Value="taskList.Description" Label="Description" Variant="Variant.Text" Lines="3" Required />

        <MudSelect Class="mt-3" T="int" Label="Priority" AnchorOrigin="Origin.BottomCenter" @bind-Value="priority">
            <MudSelectItem Value="0">@Priority.Low</MudSelectItem>
            <MudSelectItem Value="1">@Priority.Medium</MudSelectItem>
            <MudSelectItem Value="2">@Priority.High</MudSelectItem>
        </MudSelect>

        <MudDivider DividerType="DividerType.Middle" Class="my-6" />

        <MudPaper Class="mt-5">
            <span>
                Check List Items
                <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="AddRow" Title="New Checklist Item" />
            </span>
            @for (int i = 0; i < taskList.TaskItems.Count(); i++)
            {
                var idx = i;
                <MudPaper Class="d-flex gap-3 mt-3">
                    <MudDatePicker @bind-Value="@taskList.TaskItems.ElementAt(idx).Created" Disabled="true" Label="Created" Class="mt-1" Text="@taskList.TaskItems.ElementAt(idx).Created.ToShortDateString()"></MudDatePicker>
                    <MudTextField @bind-Value="taskList.TaskItems.ElementAt(idx).Description" Label="Checklist Item" Variant="Variant.Text" Required />
                    <MudTextField  @bind-Value="taskList.TaskItems.ElementAt(idx).Note" Label="Checklist Note" Variant="Variant.Text" />
                    <MudDatePicker @bind-Date="taskList.TaskItems.ElementAt(idx).Completed" Label="Completed" Color="Color.Primary"></MudDatePicker>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Medium" OnClick="() => DeleteRow(taskList.TaskItems.ElementAt(idx).Id)" />
                </MudPaper>
            }
        </MudPaper>

        <MudPaper Class="mt-3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="HandleSubmit">Submit</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" Class="mx-2" Href="/">Back</MudButton>
        </MudPaper>
    </MudPaper>
</MudForm>

@code {
    #nullable disable
    [Parameter]
    public string Id { get; set; }

    public TaskList taskList { get; set; }
#nullable enable

    // update vars
    public int priority { get; set; }
    public bool success { get; set; }
    public MudForm form { get; set; }

    protected override async void OnParametersSet()
    {
        taskList = await TaskListService.GetAsync(Int32.Parse(Id));

        // users would have to code in a number themselves for this to error out
        if (taskList is null)
            NavManager.NavigateTo("/Error/");
    }

    #region Validation
    // Current character count for title -> title is limited to 100
    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 100 < ch?.Length)
            yield return "Max 100 characters";
    }
    #endregion

    #region TaskItemFunctions
    private async void AddRow() {
        taskList.TaskItems.Add(new TaskItem
        {
            TaskListId = Int32.Parse(Id),
            Created = DateTime.Now
        });
    }
    private async void DeleteRow(long idx)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var result = await DialogService.Show<DeleteCheck>("Are you sure you would like to delete?", options).Result;
        // They confirmed  the delete dialog option (AKA they did not push cancel)
        // delete and refresh
        if (!result.Canceled)
        {
            await TaskItemService.DeleteAsync(taskList.TaskItems.First(ti => ti.Id == idx));
            // refresh
            NavManager.NavigateTo(NavManager.Uri, true);
        }
    }
    #endregion

    private async void HandleSubmit()
    {
        // log info
        Logger.LogInformation("Updateing TaskList & TaskItems with Id " + Id);

        if ((int)taskList.Priority != priority)
            taskList.Priority = (Infastructure.Entities.Priority)priority;
        await TaskListService.UpdateAsync(taskList);

        // Refresh
        NavManager.NavigateTo("/Details/" + Id);
    }
}
